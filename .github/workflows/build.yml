name: Build & Release
on:
  push:
    branches: [ main, build-verify-fix ]
    tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Gradle permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Gradle permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v4
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

# Release - the first release of the plugin must be done by hand, this section should be commented out until that
#  release:
#    name: Publish Plugin
#    needs: [ build, verify ]
#    if: startsWith(github.ref, 'refs/tags')
#    runs-on: ubuntu-latest
#
#    steps:
#      # Check out the current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v4
#        with:
#          ref: ${{ github.event.release.tag_name }}
#
#      # Set up Java environment for the next steps
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: zulu
#          java-version: 17
#
#      # Setup Gradle
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v4
#        with:
#          gradle-home-cache-cleanup: true
#
#      # Update Unreleased section with the current release note
#      - name: Patch Changelog
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          CHANGELOG: ${{ steps.properties.outputs.changelog }}
#        run: |
#          ./gradlew patchChangelog --release-note="$CHANGELOG"
#
#      # Publish the plugin to JetBrains Marketplace
#      - name: Publish Plugin
#        env:
#          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
#          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
#          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
#          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
#        run: ./gradlew publishPlugin
#
#      # Upload artifact as a release asset
#      - name: Upload Release Asset
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*

